class Solution {
public:
     vector<double> ans;
    unordered_map<string,vector<pair<string,double>>> graph;
        double bfs (string src,string dest)
    {
        if(graph.find(src)==graph.end() || graph.find(dest)==graph.end())        
            return -1;

        queue<string>q;
        q.push(src);
        unordered_map<string,bool>vis;
        unordered_map<string,double>mu;
        vis[src] = true;
        mu[src] = 1;
        while(!q.empty())
        {
            string node = q.front();
            q.pop();
            for(auto t : graph[node])
            {
                if(vis[t.first]==false)
                {
                    q.push(t.first);
                    vis[t.first] = true;
                    mu[t.first] = mu[node]*(t.second);
                }
            }
        }
        if(mu[dest]==0)
        {
            return -1;
        }
        return mu[dest];
    }
    
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
       for(int i=0;i<values.size();i++)
        {
            graph [equations[i][0] ] . push_back ({equations[i][1] , values[i]});
            graph [equations[i][1] ] . push_back ({equations[i][0] , 1.0/values[i]});
           
        }
        
        int n = queries.size();
        for(int i=0;i<n;i++)
        {
            string s = queries[i][0];
            string d = queries[i][1]; 
            ans.push_back(bfs(s,d));
        }
        return ans;
    }
};
